/**
 * generated by Xtext
 */
package org.xtext.example.markdown.generator;

import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.markdown.markdown.Bold;
import org.xtext.example.markdown.markdown.Content;
import org.xtext.example.markdown.markdown.Header1;
import org.xtext.example.markdown.markdown.Header2;
import org.xtext.example.markdown.markdown.Italic;
import org.xtext.example.markdown.markdown.Markdown;
import org.xtext.example.markdown.markdown.PlainText;
import org.xtext.example.markdown.markdown.TextBlock;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MarkdownGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    String _generateHtml = this.generateHtml(resource);
    fsa.generateFile("markdown.html", _generateHtml);
  }
  
  public String generateHtml(final Resource resource) {
    String _xblockexpression = null;
    {
      EList<EObject> _contents = resource.getContents();
      EObject _get = _contents.get(0);
      final Markdown markdown = ((Markdown) _get);
      EList<Content> _content = markdown.getContent();
      String _generate = this.generate(_content);
      String _plus = ("<html><body>" + _generate);
      _xblockexpression = (_plus + "</body></html>");
    }
    return _xblockexpression;
  }
  
  protected String _generate(final EList<Content> content) {
    final Function1<Content, String> _function = (Content it) -> {
      return this.generate(it);
    };
    List<String> _map = ListExtensions.<Content, String>map(content, _function);
    return IterableExtensions.join(_map);
  }
  
  protected String _generate(final Content content) {
    EObject _entity = content.getEntity();
    return this.generate(_entity);
  }
  
  protected String _generate(final Header1 header1) {
    String _value = header1.getValue();
    String _plus = ("<h1>" + _value);
    return (_plus + "</h1>");
  }
  
  protected String _generate(final Header2 header2) {
    String _value = header2.getValue();
    String _plus = ("<h2>" + _value);
    return (_plus + "</h2>");
  }
  
  protected String _generate(final TextBlock textblock) {
    EList<EObject> _text = textblock.getText();
    final Function1<EObject, String> _function = (EObject it) -> {
      return this.generate(it);
    };
    List<String> _map = ListExtensions.<EObject, String>map(_text, _function);
    return IterableExtensions.join(_map);
  }
  
  protected String _generate(final Bold bold) {
    EList<EObject> _value = bold.getValue();
    final Function1<EObject, String> _function = (EObject it) -> {
      return this.generate(it);
    };
    List<String> _map = ListExtensions.<EObject, String>map(_value, _function);
    String _join = IterableExtensions.join(_map);
    String _plus = ("<b>" + _join);
    return (_plus + "</b>");
  }
  
  protected String _generate(final Italic italic) {
    EList<EObject> _value = italic.getValue();
    final Function1<EObject, String> _function = (EObject it) -> {
      return this.generate(it);
    };
    List<String> _map = ListExtensions.<EObject, String>map(_value, _function);
    String _join = IterableExtensions.join(_map);
    String _plus = ("<i>" + _join);
    return (_plus + "</i>");
  }
  
  protected String _generate(final PlainText plainText) {
    return plainText.getValue();
  }
  
  public String generate(final Object content) {
    if (content instanceof EList) {
      return _generate((EList<Content>)content);
    } else if (content instanceof Bold) {
      return _generate((Bold)content);
    } else if (content instanceof Content) {
      return _generate((Content)content);
    } else if (content instanceof Header1) {
      return _generate((Header1)content);
    } else if (content instanceof Header2) {
      return _generate((Header2)content);
    } else if (content instanceof Italic) {
      return _generate((Italic)content);
    } else if (content instanceof PlainText) {
      return _generate((PlainText)content);
    } else if (content instanceof TextBlock) {
      return _generate((TextBlock)content);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(content).toString());
    }
  }
}
