/*
 * generated by Xtext
 */
package org.xtext.example.markdown.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.markdown.markdown.Markdown
import org.eclipse.emf.common.util.EList
import org.xtext.example.markdown.markdown.Content
import org.xtext.example.markdown.markdown.Header1
import org.xtext.example.markdown.markdown.Header2
import org.xtext.example.markdown.markdown.PlainText
import org.xtext.example.markdown.markdown.TextBlock
import org.xtext.example.markdown.markdown.Bold
import org.xtext.example.markdown.markdown.Italic

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MarkdownGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
	fsa.generateFile('markdown.html', generateHtml(resource))
	}
	
	def String generateHtml(Resource resource){
		val markdown = resource.contents.get(0) as Markdown
		'<html><body>'+ generate(markdown.content)+'</body></html>'
	}
	
	def dispatch String generate(EList<Content> content){
		content.map[generate].join
	}
	
	def dispatch String generate(Content content){
		content.entity.generate
	}
	
	def dispatch String generate(Header1 header1){
		'<h1>' + header1.value + '</h1>'
	}
	
	def dispatch String generate(Header2 header2){
		'<h2>' + header2.value + '</h2>'
	}
	
	def dispatch String generate(TextBlock textblock){
		textblock.text.map[generate].join(' ') + '<br/>'
	}
	
	def dispatch String generate(Bold bold){
		'<b>' + bold.value.map[generate].join(' ') + '</b>'
	}
	
	def dispatch String generate(Italic italic){
		'<i>' + italic.value.map[generate].join(' ') + '</i>'
	}
	
	def dispatch String generate(PlainText plainText){
		plainText.value
	}
}
