/*
 * generated by Xtext
 */
package org.xtext.example.markdown.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.markdown.services.MarkdownGrammarAccess;

public class MarkdownParser extends AbstractContentAssistParser {
	
	@Inject
	private MarkdownGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.markdown.ui.contentassist.antlr.internal.InternalMarkdownParser createParser() {
		org.xtext.example.markdown.ui.contentassist.antlr.internal.InternalMarkdownParser result = new org.xtext.example.markdown.ui.contentassist.antlr.internal.InternalMarkdownParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContentAccess().getEntityAlternatives_0_0(), "rule__Content__EntityAlternatives_0_0");
					put(grammarAccess.getTextBlockAccess().getTextAlternatives_0(), "rule__TextBlock__TextAlternatives_0");
					put(grammarAccess.getItalicAccess().getAlternatives(), "rule__Italic__Alternatives");
					put(grammarAccess.getItalicAccess().getValueAlternatives_0_1_0(), "rule__Italic__ValueAlternatives_0_1_0");
					put(grammarAccess.getItalicAccess().getValueAlternatives_1_1_0(), "rule__Italic__ValueAlternatives_1_1_0");
					put(grammarAccess.getBoldAccess().getAlternatives(), "rule__Bold__Alternatives");
					put(grammarAccess.getBoldAccess().getValueAlternatives_0_1_0(), "rule__Bold__ValueAlternatives_0_1_0");
					put(grammarAccess.getBoldAccess().getValueAlternatives_1_1_0(), "rule__Bold__ValueAlternatives_1_1_0");
					put(grammarAccess.getContentAccess().getGroup(), "rule__Content__Group__0");
					put(grammarAccess.getHeader1Access().getGroup(), "rule__Header1__Group__0");
					put(grammarAccess.getHeader2Access().getGroup(), "rule__Header2__Group__0");
					put(grammarAccess.getItalicAccess().getGroup_0(), "rule__Italic__Group_0__0");
					put(grammarAccess.getItalicAccess().getGroup_1(), "rule__Italic__Group_1__0");
					put(grammarAccess.getBoldAccess().getGroup_0(), "rule__Bold__Group_0__0");
					put(grammarAccess.getBoldAccess().getGroup_1(), "rule__Bold__Group_1__0");
					put(grammarAccess.getMarkdownAccess().getContentAssignment(), "rule__Markdown__ContentAssignment");
					put(grammarAccess.getContentAccess().getEntityAssignment_0(), "rule__Content__EntityAssignment_0");
					put(grammarAccess.getTextBlockAccess().getTextAssignment(), "rule__TextBlock__TextAssignment");
					put(grammarAccess.getHeader1Access().getValueAssignment_1(), "rule__Header1__ValueAssignment_1");
					put(grammarAccess.getHeader2Access().getValueAssignment_1(), "rule__Header2__ValueAssignment_1");
					put(grammarAccess.getPlainTextAccess().getValueAssignment(), "rule__PlainText__ValueAssignment");
					put(grammarAccess.getItalicAccess().getValueAssignment_0_1(), "rule__Italic__ValueAssignment_0_1");
					put(grammarAccess.getItalicAccess().getValueAssignment_1_1(), "rule__Italic__ValueAssignment_1_1");
					put(grammarAccess.getBoldAccess().getValueAssignment_0_1(), "rule__Bold__ValueAssignment_0_1");
					put(grammarAccess.getBoldAccess().getValueAssignment_1_1(), "rule__Bold__ValueAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.markdown.ui.contentassist.antlr.internal.InternalMarkdownParser typedParser = (org.xtext.example.markdown.ui.contentassist.antlr.internal.InternalMarkdownParser) parser;
			typedParser.entryRuleMarkdown();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MarkdownGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MarkdownGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
